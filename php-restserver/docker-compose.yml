# docker-compose.yml
version: '3.8'

services:
  php-restserver:
    image: caddy:latest
    ports:
      - "8080:8080"
    working_dir: /var/www/html
    labels:
      com.docker.compose.project: "phpcaddy"
      virtual.host: "phpcaddy.local.com"
      virtual.tls-email: your@email.com
      virtual.port: "8080"
    environment:
      VIRTUAL_HOST: "phpcaddy.local.com"
      VIRTUAL_PORT: "8080"
      LETSENCRYPT_HOST: "phpcaddy.local.com"
      LETSENCRYPT_EMAIL: your@email.com
      TZ: Asia/Bangkok
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./php:/var/www/
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - php
    restart: unless-stopped

  php:
    build: .
    working_dir: /var/www/html
    volumes:
      - ./php:/var/www
    environment:
      - TZ=Asia/Bangkok
    restart: unless-stopped

  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ update composer.json ‡πÉ‡∏´‡πâ run composer-init
  # docker-compose run --rm composer-init
  composer-init:
    image: composer:2
    volumes:
      - ./php:/var/www
    working_dir: /var/www
    command: >
      sh -c "
        # composer install --no-dev --optimize-autoloader;
        if [ ! -d 'vendor' ] && [ -f 'composer.json' ]; then
          echo 'Running composer install...';
          composer install --no-dev --optimize-autoloader;
        else
          echo 'Composer already installed or no composer.json found.';
        fi
      "
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1

  # docker-compose run --rm generate-keys
  generate-keys:
      image: alpine/openssl
      volumes:
        - ./php/configs:/keys
      command: >
        sh -c "
          if [ ! -f '/keys/private.key' ] || [ ! -f '/keys/public.key' ]; then
            echo 'Generating RSA keys...';
            # Generate private key with strong encryption
            openssl genpkey -algorithm RSA \
              -pkeyopt rsa_keygen_bits:4096 \
              -aes-256-cbc \
              -pbkdf2 \
              -out /keys/private.key \
              -pass pass:${RSA_PASSPHRASE:-mysecretpass};
            
            # Generate public key
            openssl rsa \
              -in /keys/private.key \
              -out /keys/public.key \
              -pubout \
              -outform PEM \
              -passin pass:${RAS_PASSPHRASE:-mysecretpass};
            
            # Set proper permissions
            chmod 644 /keys/private.key /keys/public.key;
            echo 'RSA keys generated successfully';
          else
            echo 'RSA keys already exist, skipping generation';
          fi
        "
      environment:
        - RAS_PASSPHRASE=${RSA_PASSPHRASE:-mysecretpass}
      deploy:
        restart_policy:
          condition: on-failure
          max_attempts: 1        

# mssql
  # mssql:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   environment:
  #     TZ: Asia/Bangkok
  #     ACCEPT_EULA: "Y"
  #     MSSQL_SA_PASSWORD: "YourStrong@Passw0rd"  # üîí ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô production ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ!
  #     MSSQL_PID: Express
  #   ports:
  #     - "1433:1433"
  #   volumes:
  #     - mssql_data:/var/opt/mssql
  #   restart: unless-stopped
  
# postgresql
  # postgres:
  #   image: postgres:18-alpine
  #   environment:
  #     TZ: Asia/Bangkok
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped

# mariadb
  # mariadb:
  #   image: mariadb:11.1
  #   environment:
  #     TZ: Asia/Bangkok
  #     MYSQL_ROOT_PASSWORD: "YourStrong@Passw0rd"  # üîí ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô production ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ!
  #     MYSQL_DATABASE: "mariadb"
  #     MYSQL_USER: "mariadb"
  #     MYSQL_PASSWORD: "YourStrong@Passw0rd"
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mariadb_data:/var/lib/mysql
  #   restart: unless-stopped

# redis
  # redis:
  #   image: redis:alpine
  #   environment:
  #     TZ: Asia/Bangkok
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped

volumes:
  caddy_data:
  caddy_config:
  mssql_data:
  postgres_data:
  mariadb_data:
  redis_data:

networks:
  default:
    external: true
    name: proxy-network  