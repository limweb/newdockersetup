{
    "restsrv": {
        "prefix": "restsrv",
        "body": [
            "<?php",
            "",
            "namespace App\\Services;",
            "",
            "//----------------------------------------------",
            "// FILE NAME:  ${1:ServiceName}Service.php gen for Servit Framework Service",
            "// Created by: ${2:Your Name}<${3:your.email@example.com}>",
            "// DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
            "//----------------------------------------------",
            "",
            "use Illuminate\\Support\\Facades\\DB;",
            "use Illuminate\\Support\\Facades\\Auth;",
            "use Illuminate\\Http\\Request;",
            "",
            "class ${1:ServiceName}Service",
            "{",
            "",
            "",
            "    private static \\$MasterModel = 'App\\Models\\\\${20:MasterModel}';",
            "    private static \\$DetailModel = 'App\\Models\\\\${30:DetailModel}';",
            "    private static \\$softdeleted =  ${40:false};",
            "    private static \\$deteilKey  =  '${50:details}';",
            "    private static \\$hasMasterDetail = ${60:false};",
            "",
            "",
            "    public static function all()",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "",
            "            \\$companyId = \\$user->creatorId();",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$datas = self::\\$MasterModel::with(self::\\$deteilKey)->get(); // with deteils",
            "            } else {",
            "                \\$datas = self::\\$MasterModel::get();",
            "            }",
            "            return [",
            "                'datas' => \\$datas,",
            "                'companyId' => \\$companyId,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    public static function alliddesc()",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            \\$companyId = \\$user ? \\$user->creatorId() : null;",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "            \\$datas = self::getalliddesc();",
            "            return [",
            "                'datas' => \\$datas,",
            "                'companyId' => \\$companyId,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    public static function byId(\\$id)",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            \\$companyId = \\$user ? \\$user->creatorId() : null;",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$data = self::\\$MasterModel::with([self::\\$deteilKey])->find(\\$id);",
            "            } else {",
            "                \\$data = self::\\$MasterModel::find(\\$id);",
            "            }",
            "",
            "            return [",
            "                'data' => \\$data,",
            "                'companyId' => \\$companyId,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        }",
            "    }",
            "",
            "    public static function byuuId(\\$uuid)",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            \\$companyId = \\$user ? \\$user->creatorId() : null;",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$data = self::\\$MasterModel::with([self::\\$deteilKey])->where('uuid', \\$uuid)->first();",
            "            } else {",
            "                \\$data = self::\\$MasterModel::where('uuid', \\$uuid)->first();",
            "            }",
            "            return [",
            "                'data' => \\$data,",
            "                'companyId' => \\$companyId,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    /* TODO: insert",
            "        *** ตัวอย่างข้อมูล",
            "        *** [",
            "        ***     'fileda'=>'data fielda',",
            "        ***     'details'=>[",
            "        ***         [",
            "        ***             'filedb'=>'data fieldb',",
            "        ***             'filedc'=>'data fielcd',",
            "        ***         ]",
            "        ***     ]",
            "        *** ]",
            "    */",
            "    public static function insert()",
            "    {",
            "        try {",
            "            \\$arrdata = request()->all();",
            "            \\$user = Auth::user();",
            "            \\$companyId = \\$user ? \\$user->creatorId() : null;",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "",
            "            \\$userId = \\$user->id;",
            "            \\$arrdata['created_by'] = \\$userId;",
            "            \\$arrdata['updated_by'] = \\$userId;",
            "            \\$rs = self::\\$MasterModel::create(\\$arrdata);",
            "            \\$rs->save();",
            "",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$parent = \\$rs->id;",
            "                \\$arrInsertorUpdates = request()->input('details', []);",
            "                self::insertorUpdateDetails(\\$arrInsertorUpdates, \\$parent, \\$userId = null);",
            "            }",
            "",
            "            \\$datas = self::getalliddesc();",
            "",
            "            return [",
            "                'data' => \\$rs,",
            "                'companyId' => \\$companyId,",
            "                'datas' => \\$datas,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "",
            "    /* TODO: insertOrupdate",
            "        *** ตัวอย่างข้อมูล",
            "        *** {",
            "        ***     \\$item = [",
            "        ***         'id' => 1,",
            "        ***         'name' => 'item 1',",
            "        ***         'price' => 100,",
            "        ***     ],",
            "        ***     \\$details = [",
            "        ***        [ 'id' => 1,",
            "        ***         'name' => 'detail 1',",
            "        ***         'price' => 100,",
            "        ***         'parent_id=> 1",
            "        ***        ],",
            "        ***     ],",
            "        ***     \\$itemdels = [",
            "        ***        [ 'id' => 1,",
            "        ***         'name' => 'itemdel 1',",
            "        ***         'price' => 100,",
            "        ***         'parent_id=> 1",
            "        ***        ],",
            "        ***     ],  ",
            "        *** }",
            "    */",
            "    public static function insertOrupdate()",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "            \\$itemData = request()->input('item', []); // item ที่จะ insert or update ",
            "",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$detailsData = request()->input('details', []);",
            "                \\$itemdelsData = request()->input('itemdels', []);",
            "            } else {",
            "                \\$detailsData = [];",
            "                \\$itemdelsData = [];",
            "            }",
            "",
            "            \\$userId = \\$user->id;",
            "            \\$companyId = \\$user->creatorId();",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            \\$pkey = (new self::\\$MasterModel)->getKeyName();",
            "            DB::beginTransaction();",
            "",
            "            // For insert or update item",
            "            \\$pkeyValue = \\$itemData[\\$pkey] ?? null;",
            "            \\$item = self::\\$MasterModel::firstOrNew([\\$pkey => \\$pkeyValue]);",
            "            \\$newdata = !\\$item->exists;",
            "            \\$item->fill(\\$itemData);",
            "            \\$item->updated_by = \\$userId;",
            "",
            "            if (\\$newdata) {",
            "                \\$item->created_by = \\$userId;",
            "            }",
            "            \\$item->save();",
            "            if (self::\\$hasMasterDetail) {",
            "                \\$detailpkey = (new self::\\$DetailModel)->getKeyName();",
            "                // for insert or update details",
            "                foreach (\\$detailsData as \\$detailData) {",
            "                    \\$pkeyDtValue = \\$detailData[\\$detailpkey] ?? null;",
            "                    \\$detail = self::\\$DetailModel::firstOrNew([\\$detailpkey => \\$pkeyDtValue]);",
            "                    \\$newdata = !\\$detail->exists;",
            "                    \\$detail->fill(\\$detailData);",
            "                    \\$detail->updated_by = \\$userId;",
            "                    if (\\$newdata) {",
            "                        \\$detail->created_by = \\$userId;",
            "                    }",
            "                    \\$detail->save();",
            "                }",
            "",
            "                // for delete old details",
            "                foreach (\\$itemdelsData as \\$ItemdetaildelData) {",
            "                    \\$pkeyDtValue = \\$ItemdetaildelData[\\$detailpkey] ?? null;",
            "                    \\$Itemdetaildel = self::\\$DetailModel::find(\\$pkeyDtValue);",
            "                    if (\\$Itemdetaildel) {",
            "                        // FOR SOFT DELETE",
            "                        // \\$Itemdetaildel->deleted_by = \\$userId;",
            "                        // \\$Itemdetaildel->save();",
            "                        \\$Itemdetaildel->delete();",
            "                    }",
            "                }",
            "            }",
            "            DB::commit();",
            "",
            "            \\$datas = self::getalliddesc();",
            "            return [",
            "                'data' => \\$item,",
            "                'companyId' => \\$companyId,",
            "                'datas' => \\$datas,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            DB::rollBack();",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    public static function delete(\\$id)",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "            \\$companyId = \\$user->creatorId();",
            "            \\$userId = \\$user->id;",
            "            \\$item = self::\\$MasterModel::find(\\$id);",
            "",
            "            if (\\$item) {",
            "                if (self::\\$softdeleted) {",
            "                    // for del master and item details softdelete",
            "                    if (self::\\$hasMasterDetail) {",
            "                        \\$details = \\$item->{self::\\$deteilKey};",
            "                        foreach (\\$details as \\$detail) {",
            "                            \\$detail->deleted_by = \\$userId;",
            "                            \\$detail->save();",
            "                            \\$detail->delete(); // This will soft delete each detail",
            "                        }",
            "                    }",
            "                    \\$item->deleted_by = \\$userId;",
            "                    \\$item->save();",
            "                    \\$item->delete(); // Then delete the master",
            "                } else {",
            "                    // for not softdelete",
            "                    // deleted master and item details not softdelete",
            "                    if (self::\\$hasMasterDetail) {",
            "                        \\$item->{self::\\$deteilKey}()->delete(); // for ลบ รายการ details",
            "                    }",
            "                    \\$item->delete(); // for ลบ master   ",
            "                }",
            "            }",
            "            \\$datas = self::getalliddesc();",
            "            return [",
            "                'data' => \\$item,",
            "                'datas' => \\$datas,",
            "                'companyId' => \\$companyId,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => 'ลบข้อมูลเรียบร้อยแล้ว',",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    public static function deletebyuuid(\\$uuid)",
            "    {",
            "        try {",
            "            \\$user = Auth::user();",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success';",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "            \\$companyId = \\$user->creatorId();",
            "            \\$userId = \\$user->id;",
            "            \\$uuidItem = self::\\$MasterModel::where('uuid', \\$uuid)->first();",
            "",
            "            if (\\$uuidItem) {",
            "                if (self::\\$softdeleted) {",
            "                    if (self::\\$hasMasterDetail) {",
            "                        \\$details = \\$uuidItem->{self::\\$deteilKey};",
            "                        foreach (\\$details as \\$detail) {",
            "                            \\$detail->deleted_by = \\$userId;",
            "                            \\$detail->save();",
            "                            \\$detail->delete(); // This will soft delete each detail",
            "                        }",
            "                    }",
            "                    \\$uuidItem->deleted_by = \\$userId;",
            "                    \\$uuidItem->save();",
            "                    \\$uuidItem->delete(); // Then delete the master",
            "                } else {",
            "                    if (self::\\$hasMasterDetail) {",
            "                        \\$uuidItem->{self::\\$deteilKey}()->delete(); // for ลบ รายการ details",
            "                    }",
            "                    \\$uuidItem->delete(); // for ลบ master   ",
            "                }",
            "            }",
            "            \\$datas = self::getalliddesc();",
            "            return [",
            "                'data' => \\$uuidItem,",
            "                'companyId' => \\$companyId,",
            "                'datas' => \\$datas,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => 'ลบข้อมูลเรียบร้อยแล้ว',",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    public static function vuetable()",
            "    {",
            "        try {",
            "            // DB::enableQueryLog(); ",
            "            // DB::beginTransaction(); ",
            "            \\$user = Auth::user();",
            "            \\$msg = 'สำเร็จ';",
            "            \\$type = 'success'; //success,info,error,warning  ",
            "            \\$title = 'Successed!';",
            "            \\$success = true;",
            "",
            "            if (!\\$user) {",
            "                throw new \\Exception('401 Unauthorized', 401);",
            "                \\$success = false;",
            "                \\$type = 'error';",
            "                \\$title = 'Error!';",
            "                \\$msg = '401 Unauthorized';",
            "            }",
            "",
            "            \\$companyId = \\$user->creatorId();",
            "            \\$userId = \\$user->id;",
            "            // init data ",
            "            \\$perpage = 10;",
            "            \\$current_page = 1;",
            "            \\$from = \\$skip = (\\$current_page - 1) * \\$perpage;",
            "            \\$to = (\\$current_page) * \\$perpage;",
            "            \\$host = request()->getHost();",
            "            \\$method = request()->method();",
            "            \\$urlnext = '';",
            "            \\$urlprev = '';",
            "            \\$sort = '';",
            "            \\$kw = '';",
            "            \\$filter = '';",
            "            \\$next_page_url = '';",
            "            \\$prev_page_url = '';",
            "            \\$inptus = '';",
            "            // \\$fills = []; //ext: ['name','nickname']; ใส่ field ที่ต้องการ ค้นหาด้วย kw ",
            "            \\$cat = new self::\\$MasterModel();",
            "            \\$fills = \\$cat->getFillable();",
            "            //\\$fills = []; ",
            "            // dd(\\$req->gets->kw); ",
            "",
            "            \\$qry = self::\\$MasterModel::query();",
            "            // GET----- ",
            "            if (\\$method == 'GET') {",
            "                \\$perpage = \\$skip = request()->query('per_page', \\$perpage);",
            "                \\$current_page = request()->query('page', \\$current_page);",
            "                \\$from = (\\$current_page - 1) * \\$perpage;",
            "                \\$to = (\\$current_page) * \\$perpage;",
            "                \\$host = request()->server('HTTP_HOST');",
            "                \\$sort = request()->query('sort', '');",
            "                \\$kw = request()->query('kw', '');",
            "                \\$filter = request()->query('filter', '');",
            "            }",
            "",
            "            // POST---- ",
            "            if (\\$method == 'POST') {",
            "                \\$perpage = \\$skip = request()->input('perpage', \\$perpage);",
            "                \\$current_page = request()->input('page', \\$current_page);",
            "                \\$from = (+\\$current_page - 1) * (+\\$perpage);",
            "                \\$to = (+\\$current_page) * (+\\$perpage);",
            "                \\$host = request()->server('HTTP_HOST');",
            "                \\$sort = request()->input('sort', '');",
            "                \\$kw = request()->input('kw', '');",
            "                \\$filter = request()->input('filter', '');",
            "",
            "                \\$inputs = request()->all();",
            "                foreach (\\$inputs as \\$key => \\$val) {",
            "                    if (!in_array(\\$key, ['kw', 'sort', 'filter', 'per_page', 'page'])) {",
            "                        \\$qry->where(\\$key, 'like', '%' . \\$val . '%');",
            "                    }",
            "                }",
            "            }",
            "            // SORT --------------- ",
            "            if (\\$sort) {",
            "                \\$sorts = explode(',', \\$sort);",
            "                foreach (\\$sorts as \\$sortrow) {",
            "                    list(\\$s, \\$ds) =  explode('|', \\$sortrow);",
            "                    \\$qry->orderBy(\\$s, \\$ds);",
            "                }",
            "            }",
            "            // KW --------------- ",
            "            if (\\$kw) {  // kw ใส่ได้ 1 ค่า ",
            "                foreach (\\$fills as \\$key) {",
            "                    \\$qry->orWhere(\\$key, 'like', '%' . \\$kw . '%');",
            "                }",
            "            }",
            "            // FILTER --------------- ",
            "            if (\\$filter) { // มาจาก header of table  ประกับด้วย field|kw,field|kw ",
            "                \\$filters = explode(',', \\$filter);",
            "                foreach (\\$filters as \\$filterrow) {",
            "                    list(\\$f, \\$kw) =  explode('|', \\$filterrow);",
            "                    \\$qry->orWhere(\\$f, 'like', '%' . \\$kw . '%');",
            "                }",
            "            }",
            "",
            "",
            "            \\$total = \\$qry->count();",
            "            \\$lastpage = ceil(\\$total / \\$perpage);",
            "            // \\$datas = \\$qry->orderBy('created_at', 'desc')->take(\\$perpage)->skip(\\$from)->get();",
            "            // \\$datas = \\$qry->take(\\$perpage)->skip(\\$from)->get();",
            "             if (self::\\$hasMasterDetail) {",
            "                 \\$datas = \\$qry->with(self::\\$deteilKey)->orderBy('created_at', 'desc')->take(\\$perpage)->skip(\\$from)->get();",
            "             } else {",
            "                 \\$datas = \\$qry->take(\\$perpage)->skip(\\$from)->get();",
            "             }",
            "",
            "            // GETs Only ------------------- ",
            "            if (\\$method == 'GET' && \\$host) {",
            "                \\$protocal = explode('/', request()->server('SERVER_PROTOCOL'))[0] == 'HTTP' ? 'http' : 'https';",
            "                \\$serverpath = \\$protocal . '://' . \\$host . (explode('?', request()->server('REQUEST_URI'))[0]);",
            "",
            "                if (\\$sort) {",
            "                    \\$urlnext .= '&sort=' . request()->query('sort');",
            "                    \\$urlprev .= '&sort=' . request()->query('sort');",
            "                }",
            "                if (\\$filter) {",
            "                    \\$urlnext .= '&filter=' . request()->query('filter');",
            "                    \\$urlprev .= '&filter=' . request()->query('filter');",
            "                }",
            "",
            "                if (\\$current_page == \\$lastpage || \\$total == 0 || \\$lastpage == 0) {",
            "                    \\$next_page_url = null;",
            "                } else {",
            "                    \\$next_page_url = \\$serverpath . '?page=' . (\\$current_page + 1) . '&per_page=' . \\$perpage . \\$urlnext;",
            "                }",
            "                if (\\$current_page <= 1) {",
            "                    \\$prev_page_url = null;",
            "                } else {",
            "                    \\$prev_page_url = \\$serverpath . '?page=' . (\\$current_page - 1) . '&per_page=' . \\$perpage . \\$urlprev;",
            "                }",
            "            }",
            "",
            "            // DB::commit(); ",
            "            return [",
            "                'total' => \\$total,",
            "                'companyId' => \\$companyId,",
            "                'per_page' => \\$perpage,",
            "                'current_page' => \\$current_page,",
            "                'last_page' => \\$lastpage,",
            "                'next_page_url' => \\$next_page_url,",
            "                'prev_page_url' => \\$prev_page_url,",
            "                'from' => \\$from + 1,",
            "                'to' => \\$to,",
            "                'host' => \\$host,",
            "                // 'ajax' => \\$ajax, ",
            "                'page' => \\$current_page,",
            "                'perpage' => \\$perpage,",
            "                'skip' => \\$skip,",
            "                'total' => \\$total,",
            "                'companyId' => \\$companyId,",
            "                'count' => count(\\$datas),",
            "                // 'columns' => DB::getSchemaBuilder()->getColumnListing(\\$qry->getQuery()->from), ",
            "                // 'info' => \\$info, ",
            "                // 'infos' => \\$info, ",
            "                // 'domains' => \\$host, ",
            "                // 'method' => \\$method, ",
            "                // 'sort' => \\$sort, ",
            "                // 'kw' => \\$kw, ",
            "                // 'filter' => \\$filter, ",
            "                // 'fills' => \\$fills, ",
            "                // 'inputs' => \\$inptus, ",
            "                'data' => \\$datas,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'user' => \\$user,",
            "                // 'sql' => DB::getQueryLog(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__ ",
            "            ];",
            "        } catch (\\Exception \\$e) {",
            "            // DB::rollback(); ",
            "            dd(\\$e->getMessage());",
            "            // throw new \\Exception(\\$e->getMessage(), \\$e->getCode());",
            "        }",
            "    }",
            "",
            "    protected static function getalliddesc()",
            "    {",
            "        \\$pkey = (new self::\\$MasterModel)->getKeyName();",
            "        if (self::\\$hasMasterDetail) {",
            "            return self::\\$MasterModel::orderBy(\\$pkey, 'desc')->with(self::\\$deteilKey)->get();",
            "        }",
            "        return self::\\$MasterModel::orderBy(\\$pkey, 'desc')->get();",
            "    }",
            "",
            "    protected static function delDetails(\\$arrdels, \\$user = null)",
            "    {",
            "        \\$pkey = (new self::\\$DetailModel)->getKeyName();",
            "        foreach (\\$arrdels as \\$row) {",
            "            \\$itm = self::\\$DetailModel::find(\\$row[\\$pkey]);",
            "            if (\\$itm) {",
            "                \\$itm->deleted_by = \\$user;",
            "                \\$itm->save();",
            "                \\$itm->delete();",
            "            }",
            "        }",
            "    }",
            "",
            "    protected static function insertorUpdateDetails(\\$arrInsertorUpdates, \\$parent, \\$userId = null)",
            "    {",
            "        if (empty(\\$arrInsertorUpdates)) {",
            "            return;",
            "        }",
            "        \\$pkey = (new self::\\$DetailModel)->getKeyName();",
            "        foreach (\\$arrInsertorUpdates as \\$row) {",
            "            \\$pkeyValue = \\$row[\\$pkey] ?? null;",
            "            \\$itm = self::\\$DetailModel::firstOrNew([\\$pkey => \\$pkeyValue]);  // ถ้ามีก็ update ถ้าไม่มีก็ insert",
            "            \\$newdata = !\\$itm->exists; // เป็น new หรือ เก่า",
            "            \\$itm->fill(\\$row); // fill ข้อมูล ",
            "            \\$itm->updated_by = \\$userId;  //ใส่ updated_by",
            "            if (\\$newdata) {  // ถ้า  new ",
            "                \\$itm->created_by = \\$userId;",
            "            }",
            "            \\$itm->parent_id = \\$parent->id;  //TODO:  ต้องปรับปรุง เผื่อ FK ไม่มี หรือ เปลี่ยน ให้ใช้ parent_id",
            "            \\$itm->save();",
            "        }",
            "        return true;",
            "    }",
            "",
            "    protected static function getItemAndDetailById(\\$id)",
            "    {",
            "        return self::\\$MasterModel::with([self::\\$deteilKey])->orderBy('id', 'desc')->where('id', \\$id)->first();",
            "    }",
            "",
            "    protected static function getItemAndDetailByUuid(\\$uuid)",
            "    {",
            "        return self::\\$MasterModel::with([self::\\$deteilKey])->orderBy('id', 'desc')->where('uuid', \\$uuid)->first();",
            "    }",
            "",
            "    protected static function getmonths()",
            "    {",
            "        return DB::select(\"SELECT DISTINCT to_char(created_at,'YYYY-MM')  as month FROM \" . (new self::\\$MasterModel)->getTable() . \" order by month desc\");",
            "    }",
            "}",
            "",
        ],
        "description": "Laravel Service Template with CRUD operations"
    }
}